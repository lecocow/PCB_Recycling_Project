import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
from example_interfaces.srv import SetBool  # exemple de service standard
import time

class ArmController(Node):
    def __init__(self):
        super().__init__('arm_controller')
        self.publisher_ = self.create_publisher(PoseStamped, '/arm_goal_pose', 10)

        # Création d’un service qui écoute les demandes
        self.srv = self.create_service(SetBool, 'move_arm', self.move_arm_callback)

        self.z_height = 0.2
        self.current_x = 0.0
        self.current_y = 0.0

        self.get_logger().info("Service 'move_arm' prêt. Appellez-le pour déplacer le bras.")

    def move_to(self, target_x: float, target_y: float, hold_time: float = 2.0):
        pose = PoseStamped()
        pose.header.frame_id = "base_link"
        pose.header.stamp = self.get_clock().now().to_msg()

        pose.pose.position.x = target_x
        pose.pose.position.y = target_y
        pose.pose.position.z = self.z_height
        pose.pose.orientation.w = 1.0

        self.publisher_.publish(pose)
        self.get_logger().info(f"Déplacement vers (x={target_x}, y={target_y})")

        self.current_x = target_x
        self.current_y = target_y

        time.sleep(hold_time)

    def move_arm_callback(self, request, response):
        """
        Callback exécuté quand on appelle le service 'move_arm'.
        Ici j’utilise un service SetBool juste pour la démo.
        Si request.data = True → va à (0.3, 0.2)
        Si request.data = False → va à (-0.2, 0.4)
        """
        if request.data:
            self.move_to(0.3, 0.2)
            response.success = True
            response.message = "Bras déplacé vers (0.3, 0.2)"
        else:
            self.move_to(-0.2, 0.4)
            response.success = True
            response.message = "Bras déplacé vers (-0.2, 0.4)"
        return response


def main(args=None):
    rclpy.init(args=args)
    node = ArmController()
    try:
        rclpy.spin(node)   # attend les appels de service
    except KeyboardInterrupt:
        node.get_logger().info("Arrêt du nœud.")
    finally:
        node.destroy_node()
        rclpy.shutdown()
